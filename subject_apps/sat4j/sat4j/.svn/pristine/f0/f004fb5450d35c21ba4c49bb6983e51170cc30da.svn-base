<?xml version="1.0" encoding="UTF-8"?>
<!-- Anne Parrain : 2006/05/02 - version 1.0 -->

<xsd:schema 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema">

	<!-- Definition of global types -->

	<!-- Type for relations -->
	<xsd:simpleType name="RelationType">
		<xsd:annotation>
			<xsd:documentation>
				Type of relations. Relations are either represented by
				allowed tuples, forbidden tuples or predicates. For the
				moment we are representing predicates separately, maybe
				we should merge the two tags.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="supports" />
			<xsd:enumeration value="conflicts" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- Type for format -->
	<xsd:simpleType name="FormatType">
		<xsd:restriction base="xsd:token">
			<xsd:enumeration value="XCSP 2.0" />
			<xsd:enumeration value="XCSP 2.1" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- Kind of problems -->
	<xsd:simpleType name="ProblemType">
		<xsd:restriction base="xsd:token">
			<xsd:enumeration value="CSP" />
			<xsd:enumeration value="QCSP" />
			<xsd:enumeration value="WCSP" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<!-- Type for tuples -->
	<xsd:simpleType name="TupleType">
		<xsd:annotation>
			<xsd:documentation>
				That type is supposed to ensure that tuples are
				expressed correctly. The current regular expression may
				not be good :-=)
			</xsd:documentation>
		</xsd:annotation> 
		<xsd:restriction base="xsd:token"/>
	        <!--  
			<xsd:pattern
				value="[0-9]+( [0-9]+)*( ?)(\|( ?)[0-9]+( [0-9]+)*)*" />
		</xsd:restriction>
					-->
	</xsd:simpleType>


	<!-- Type for the number of solutions -->
	<xsd:simpleType name="NbSolutionsType">
		<xsd:annotation>
			<xsd:documentation>
				That type describes the attribute nbSolutions for the
				instance element. The number of solutions can either be
				a "?" or a positive integer.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:union memberTypes="xsd:positiveInteger">
			<xsd:simpleType>
				<xsd:restriction base="xsd:token">
					<xsd:enumeration value="?" />
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:union>
	</xsd:simpleType>

	<!-- Type for domain values -->
	<xsd:simpleType name="DomainValuesType">
		<xsd:annotation>
			<xsd:documentation>
				Type for the values of a domain. It is an enumeration of
				allowed values and of interval of values noted by
				begin..end. The current regular expression may not be
				good :-=)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:token">
			<xsd:pattern value="(((-?[0-9]+)|(-?[0-9]+\.\.-?[0-9]+)) ?)*" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- Type for formal parameters in predicate definition -->
	<!-- this type is currently replaced by NMTOKENS -->
	<xsd:simpleType name="FormalParametersType">
		<xsd:annotation>
			<xsd:documentation>
				Type for formal parameters in predicate definition. This
				type is a string like "param_name param_type param_name
				param_type ..." The current regular expression may not
				be good :-=)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:token">
			<xsd:pattern value="" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- Type for expressions -->
	<xsd:complexType name="ExpressionType">
		<xsd:annotation>
			<xsd:documentation>
				Type for expressions describing predicate. Several kinds
				of expression will be possible : functional expression,
				infix expression, MathML expression. As for the 2006
				competition only functional representation is allowed,
				the type is restricted to this case too.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:choice>
			<!-- <xsd:element name="functional" type="FunctionalExpressionType" /> -->
			<xsd:element name="functional" type="xsd:token" />
			<!-- Here it will be possible to define others kind of expressions -->
		</xsd:choice>
	</xsd:complexType>

	<!-- Type for functional expressions -->
	<!-- this type is unused -->
	<xsd:simpleType name="FunctionalExpressionType">
		<xsd:annotation>
			<xsd:documentation>
				Type for functional expressions. Functional expressions
				are boolean expressions.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:token">
			<!-- to be written -->
			<xsd:pattern value="" />
		</xsd:restriction>
	</xsd:simpleType>


	<!-- Type for the reference in constraints -->
	<xsd:simpleType name="ReferenceType">
		<xsd:annotation>
			<xsd:documentation>
				That type describes the attribute reference for the
				constraint element. It can be either an IDREF of a
				predicate or a relation, or the name of a global
				constraint.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:union memberTypes="xsd:IDREF">
			<xsd:simpleType>
				<xsd:restriction base="xsd:NMTOKEN">
					<xsd:enumeration value="global:allDifferent"/>
					<xsd:enumeration value="global:alldifferent"/>
					<xsd:enumeration value="global:element" />
					<xsd:enumeration value="global:weightedsum"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:union>
	</xsd:simpleType>

	<!-- Type for effective parameters in constraints -->
	<xsd:complexType name="EffectiveParametersType" mixed="true">
		<xsd:annotation>
			<xsd:documentation>
				That type describes effective parameters for
				constraints.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence minOccurs="0">
			<xsd:element name="list" type="ListType" />
			<xsd:element name="cst">
				<xsd:complexType>
					<xsd:simpleContent>
						<xsd:extension base="xsd:integer">
							<xsd:attribute name="name"
								type="xsd:NMTOKEN" />
						</xsd:extension>
					</xsd:simpleContent>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>


	<!-- Type  for lists -->
	<xsd:complexType name="ListType" mixed="true">
		<xsd:sequence minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="list" type="ListType" />
		</xsd:sequence>
	</xsd:complexType>


	<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->

	<!-- Description of an instance -->
	<xsd:element name="instance">
		<xsd:complexType>
			<xsd:sequence>
				<!-- 1- presentation element -->
				<xsd:element name="presentation">
					<xsd:complexType>
						<xsd:simpleContent>
							<xsd:extension base="xsd:token">
								<xsd:attribute name="name"
									type="xsd:token" use="optional" />
								<xsd:attribute name="type"
									type="ProblemType" use="optional" />
								<xsd:attribute name="nbSolutions"
									type="NbSolutionsType" use="optional" />
								<xsd:attribute name="solution"
									type="xsd:token" use="optional" />
								<xsd:attribute name="format"
									type="FormatType" use="required" />
								<xsd:attribute name="maxConstraintArity"
									type="xsd:positiveInteger" use="optional" />
								<xsd:attribute name="maxSatisfiableConstraints"
									type="xsd:positiveInteger" use="optional" />
							</xsd:extension>
						</xsd:simpleContent>
					</xsd:complexType>
				</xsd:element>

				<!-- 2- domains element -->
				<xsd:element name="domains">
					<xsd:complexType>
						<xsd:sequence>
							<!-- a domains element contains an unbounded number of domain elements -->
							<xsd:element name="domain" minOccurs="1"
								maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:simpleContent>
										<xsd:extension
											base="DomainValuesType">
											<xsd:attribute name="name"
												type="xsd:ID" use="required" />
											<xsd:attribute
												name="nbValues" type="xsd:positiveInteger" use="required" />
										</xsd:extension>
									</xsd:simpleContent>
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="nbDomains"
							type="xsd:positiveInteger" use="required" />
					</xsd:complexType>
				</xsd:element>

				<!-- 3- variables element -->
				<xsd:element name="variables">
					<xsd:complexType>
						<xsd:sequence>
							<!-- a variables element contains an unbounded number of variable elements -->
							<xsd:element name="variable" minOccurs="1"
								maxOccurs="unbounded">
								<xsd:complexType>
									<!-- variable is an empty element -->
									<xsd:attribute name="name"
										type="xsd:ID" use="required" />
									<xsd:attribute name="domain"
										type="xsd:IDREF" use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="nbVariables"
							type="xsd:positiveInteger" use="required" />
					</xsd:complexType>
				</xsd:element>

				<!-- 4- relations element -->
				<xsd:element name="relations" minOccurs="0"
					maxOccurs="1">
					<xsd:complexType>
						<xsd:sequence minOccurs="0" maxOccurs="1">
							<xsd:element name="relation" minOccurs="1"
								maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:simpleContent>
										<xsd:extension
											base="TupleType">
											<xsd:attribute name="name"
												type="xsd:ID" use="required" />
											<xsd:attribute name="arity"
												type="xsd:positiveInteger" use="required" />
											<xsd:attribute
												name="nbTuples" type="xsd:nonNegativeInteger" use="required" />
											<xsd:attribute
												name="semantics" type="RelationType" use="required" />
										</xsd:extension>
									</xsd:simpleContent>
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="nbRelations"
							type="xsd:positiveInteger" use="required" />
					</xsd:complexType>
				</xsd:element>

				<!-- 5- predicates element -->
				<xsd:element name="predicates" minOccurs="0"
					maxOccurs="1">
					<xsd:complexType>
						<xsd:sequence minOccurs="0" maxOccurs="1">
							<xsd:element name="predicate" minOccurs="1"
								maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence>
										<!-- <xsd:element name="parameters" type="FormalParametersType" /> -->
										<xsd:element name="parameters"
											type="xsd:NMTOKENS" />
										<xsd:element name="expression"
											type="ExpressionType" />
									</xsd:sequence>
									<xsd:attribute name="name"
										type="xsd:ID" use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="nbPredicates"
							type="xsd:positiveInteger" use="required" />
					</xsd:complexType>
				</xsd:element>

				<!-- 6- constraints element -->
				<xsd:element name="constraints">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="constraint" minOccurs="1"
								maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence minOccurs="0"
										maxOccurs="1">
										<!-- <xsd:element name="parameters" type="EffectiveParametersType" /> -->
										<xsd:element name="parameters"
											type="xsd:normalizedString" />
									</xsd:sequence>
									<xsd:attribute name="name"
										type="xsd:ID" use="required" />
									<xsd:attribute name="arity"
										type="xsd:positiveInteger" use="required" />
									<xsd:attribute name="scope"
										type="xsd:IDREFS" use="required" />
									<xsd:attribute name="reference"
										type="ReferenceType" use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="nbConstraints"
							type="xsd:positiveInteger" use="required" />
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

</xsd:schema>
