How to run the tests:IDE : Eclipse API: JUnit 41)	Create a new project named JDEPEND in eclipse and import the contents of JDEPEND project into the folder.2)	To run only the unit tests run : JDependUnitTests.java3)	To run only the acceptance tests run : JDependAcceptanceTests.java4)	To run both unit and acceptance tests run : JDependAllTests.javaNote: jdepend-2.9.1.jar file path has to be set to the jar file in lib folder.Total number of tests: 425Unit Tests: 373Acceptance Tests: 52ACCEPTANCE TESTSPackage: testFileName: JDependPackageAcceptanceTests.java       JDependFrameworkAcceptanceTests.java•	Tests by passing a class file•	Tests by passing empty input•	Tests by passing a java file•	Tests by passing null input•	Tests by passing two class files•	Tests by passing two same class files•	Tests by passing a class file which does not exist•	Tests by passing abstract class file•	Tests by passing concrete class file•	Tests by passing inner class file•	Tests by passing package class filePackage: testFileName: JDependTextuiAcceptanceTests.java 	       JDependXmluiAcceptanceTests.java                     JDependSwinguiAcceptanceTests.javaTests without specifying a directoryTests by specifying a directory which does not existTests by specifying –file option but without file nameTests by specifying –components without component namesTests by specifying an invalid optionTests by passing empty argumentsTests by passing null argumentsTest by specifying –file option with file nameTests by specifying –components with component namesTests by passing build directoryUNIT TESTSPackage: jdepend (tests are in the test.jdepend)File: ClassFileParserTest.java Tests: ClassFileParser.javaThe ClassFileParser class is responsible for parsing a Java class file to create a JavaClass•	Tests by passing invalid class file as input.•	Tests by passing interface class as input.•	Tests by passing abstract class as input.•	Tests by passing concrete class as input.•	Tests by passing package class as input.•	Tests by passing inner class as input•	Tests if the reset method resets the variables•	Tests by passing invalid class input stream as input.•	Tests by passing interface class input stream  as input.•	Tests by passing abstract class input stream as input.•	Tests by passing concrete class input stream  as input.•	Tests by passing package class input stream  as input.•	Tests by passing inner class input stream as input•	Tests toString method by passing interface class and package class.File: CollectAllCyclesTest.java & CycleTest.javaTests: JavaPackage.javaThe JavaPackage class represents a Java package.•	Tests by passing two java packages which have no cycles•	Tests by passing two java packages which have 1 branch cycle•	Tests by passing three java packages which have 1 branch cycle•	Tests by passing three java packages which have 1 branch sub cycle•	Tests by passing three java packages which have 2 branch cycle•	Tests by passing five java packages which have 2 branch cycle•	Tests to check the volatility of a package.•	Tests to check if a class can be added to a package.•	Tests to get the total number of classes in a package.•	Tests to get the total number of abstract classes in a package•	Tests to add/set afferents of a package•	Tests to add/set efferents of a package•	Tests to check afferent coupling of a package•	Tests to check efferent coupling of a package•	Tests to check instability of a package•	Tests to check abstractness of a package•	Tests to check distance of a packageFile: ComponentTest.java & MetricTest.javaTests: JDepend.javaThis class is the data model used by the jdepend.textui.JDepend and  jdepend.swingui.JDepend views. •	Tests to check the packages inside a jdepend object•	Tests for every package inside a directory to check its:o	Nameo	Concrete class counto	Abstract class counto	Afferent couplingo	Efferent couplingo	Abstractnesso	Instabilityo	Distanceo	Volatility•	Tests to check for cycles inside a directory•	Tests to check for dependency match based on a constraint•	Tests for adding packages to a jdepend object•	Tests for checking if package filter has been setFile: ConstraintTest.java Tests: DependencyConstraint.javaThe DependencyConstraint class is a constraint that tests whether two package-dependency graphs are equivalent. •	Tests whether the specified packages match the packages in this constraint.•	Tests inner methods which check if the afferent and efferents of the packages are equal.File: FileManagerTest.java Tests: FileManager.javaThe FileManager class is responsible for extracting Java class files from a collection of registered directories.•	Tests if directories are added properly to the file manager.•	Tests by adding class file, non existent class file and invalid class file.•	Tests by adding jar file, zip file and war file.File: FilterTest.java Tests: PackageFilter.javaThe PackageFilter class is used to filter imported package names. •	Tests if the filtered package names are returned.•	Tests if the specified package name passes this package filter.File: JarFileParserTest.java Tests: JavaClassBuilder.javaThe JavaClassBuilder builds JavaClass instances from .class, .jar, .war, or .zip files.•	Tests by passing invalid jar file.•	Tests by passing invalid zip file.•	Tests by passing valid jar file.•	Tests by passing jar file without inner classes.•	Tests by passing valid zip file.•	Tests by passing zip file without inner classes.File: JavaClassTest.java Tests: JavaClass.javaThe JavaClass class represents a Java class or interface.•	Tests variables of Java Class.•	Tests to assert name of class and package.•	Tests to check if a class is abstract.•	Tests to check source file of class.•	Tests to check imported packages of a class.•	Tests to check if two classes are equal.•	Tests to compare two classes.File: PackageComparatorTest.java Tests: PackageComparator.javaThe PackageComparator class is a Comparator used to compare two JavaPackage instances for order using a sorting strategy.•	Tests to check if two packages are compared using sorting strategy.File: PropertyConfiguratorTest.java Tests: PropertyConfigurator.javaThe PropertyConfigurator class contains configuration information contained in the jdepend.properties file, if such a file exists either in the user's home directory or somewhere in the classpath.•	Tests if default filters exist for the property configurator instance.•	Tests to check properties of default packages.•	Tests to check analyze inner classes executes as expected.•	Tests to check if properties have been loaded as expected.Package: jdepend.framework (tests are in the test.jdepend.framework)File: ClassFileParserTest.java Tests: ClassFileParser.javaThe ClassFileParser class is responsible for parsing a Java class file to create a JavaClass•	Tests by passing invalid class file as input.•	Tests by passing interface class as input.•	Tests by passing abstract class as input.•	Tests by passing concrete class as input.•	Tests by passing package class as input.•	Tests by passing inner class as input•	Tests if the reset method resets the variables•	Tests by passing invalid class input stream as input.•	Tests by passing interface class input stream  as input.•	Tests by passing abstract class input stream as input.•	Tests by passing concrete class input stream  as input.•	Tests by passing package class input stream  as input.•	Tests by passing inner class input stream as input•	Tests toString method by passing interface class and package class.File: CollectAllCyclesTest.java & CycleTest.javaTests: JavaPackage.javaThe JavaPackage class represents a Java package.•	Tests by passing two java packages which have no cycles•	Tests by passing two java packages which have 1 branch cycle•	Tests by passing three java packages which have 1 branch cycle•	Tests by passing three java packages which have 1 branch sub cycle•	Tests by passing three java packages which have 2 branch cycle•	Tests by passing five java packages which have 2 branch cycle•	Tests to check the volatility of a package.•	Tests to check if a class can be added to a package.•	Tests to get the total number of classes in a package.•	Tests to get the total number of abstract classes in a package•	Tests to add/set afferents of a package•	Tests to add/set efferents of a package•	Tests to check afferent coupling of a package•	Tests to check efferent coupling of a package•	Tests to check instability of a package•	Tests to check abstractness of a package•	Tests to check distance of a packageFile: ComponentTest.java & MetricTest.javaTests: JDepend.javaThis class is the data model used by the jdepend.textui.JDepend and  jdepend.swingui.JDepend views. •	Tests to check the packages inside a jdepend object•	Tests for every package inside a directory to check its:o	Nameo	Concrete class counto	Abstract class counto	Afferent couplingo	Efferent couplingo	Abstractnesso	Instabilityo	Distanceo	Volatility•	Tests to check for cycles inside a directory•	Tests to check for dependency match based on a constraint•	Tests for adding packages to a jdepend object•	Tests for checking if package filter has been setFile: ConstraintTest.java Tests: DependencyConstraint.javaThe DependencyConstraint class is a constraint that tests whether two package-dependency graphs are equivalent. •	Tests whether the specified packages match the packages in this constraint.•	Tests inner methods which check if the afferent and efferents of the packages are equal.File: FileManagerTest.java Tests: FileManager.javaThe FileManager class is responsible for extracting Java class files from a collection of registered directories.•	Tests if directories are added properly to the file manager.•	Tests by adding class file, non existent class file and invalid class file.•	Tests by adding jar file, zip file and war file.File: FilterTest.java Tests: PackageFilter.javaThe PackageFilter class is used to filter imported package names. •	Tests if the filtered package names are returned.•	Tests if the specified package name passes this package filter.File: JarFileParserTest.java Tests: JavaClassBuilder.javaThe JavaClassBuilder builds JavaClass instances from .class, .jar, .war, or .zip files.•	Tests by passing invalid jar file.•	Tests by passing invalid zip file.•	Tests by passing valid jar file.•	Tests by passing jar file without inner classes.•	Tests by passing valid zip file.•	Tests by passing zip file without inner classes.File: JavaClassTest.java Tests: JavaClass.javaThe JavaClass class represents a Java class or interface.•	Tests variables of Java Class.•	Tests to assert name of class and package.•	Tests to check if a class is abstract.•	Tests to check source file of class.•	Tests to check imported packages of a class.•	Tests to check if two classes are equal.•	Tests to compare two classes.File: PackageComparatorTest.java Tests: PackageComparator.javaThe PackageComparator class is a Comparator used to compare two JavaPackage instances for order using a sorting strategy.•	Tests to check if two packages are compared using sorting strategy.File: PropertyConfiguratorTest.java Tests: PropertyConfigurator.javaThe PropertyConfigurator class contains configuration information contained in the jdepend.properties file, if such a file exists either in the user's home directory or somewhere in the classpath.•	Tests if default filters exist for the property configurator instance.•	Tests to check properties of default packages.•	Tests to check analyze inner classes executes as expected.•	Tests to check if properties have been loaded as expected.Package: jdepend .textui(tests are in the jdepend .textui)File: JDependTest.java Tests: JDepend.javaThe JDepend class analyzes directories of Java class files, generates metrics for each Java package, and reports the metrics in a textual format.•	Tests to check if filter has been set for a package•	Tests to assert if components are set for a package•	Tests to check if directory are added for a package•	Tests to check the main print functions of the package:o	Print no statistics when no statistics are obtained when analyzedo	Print the header of analyzed packageso	Print the footer of analyzed packageso	Print statistics of analyzed packages:•	Total Classes•	Abstract Classes•	Concrete Classes•	Afferents•	Efferents•	Abstractness•	Instability•	Distance•	Tests to check package dependency cycles are printed when cycles are present/not present•	Tests to print summary of the analyzed packages•	Tests to check tab works as expected.•	Tests to check if error content prints message passed when usage is called.•	Tests to check main works as expected.•	Since the main function called System.exit  the TestCase was modified to run with a security manager that prevents calling System.exit, then catch the SecurityException.Package: jdepend .xmlui(tests are in the jdepend .xmlui)File: JDependTest.java Tests: JDepend.javaThe JDepend class analyzes directories of Java class files, generates metrics for each Java package, and reports the metrics in an XML format.•	Tests to check the main print functions of the package (XML format):o	Print no statistics when no statistics are obtained when analyzedo	Print the header of analyzed packageso	Print the footer of analyzed packageso	Print statistics of analyzed packages:•	Total Classes•	Abstract Classes•	Concrete Classes•	Afferents•	Efferents•	Abstractness•	Instability•	Distance•	Tests to check package dependency cycles are printed when cycles are present/not presentPackage: jdepend .swingui(tests are in the jdepend .swingui)File: AboutDialogTest.java Tests: AboutDialog.javaThe AboutDialog displays the about information. This is to create the pop up window which opens when you click on File->About.•	Tests the properties of the About Dialog window (height, width and title)•	Tests the contents of the About Dialog window:o	Number of componentso	Labels for the name of the author, company and websiteo	Button to close the window•	Test to check if button is created as expected with the string passed (name of button)•	Test to check if constraints are created as expected (x, y, height, width and anchor)File: AfferentNodeTest.java Tests: AfferentNode.javaThe AfferentNode class is a PackageNode for an afferent Java package and its afferent packages.•	Tests to check if afferent node is constructed with the specified parent node and afferent java package•	Tests to check if package node is returned with the specified parent node and java package•	Tests to check if collection of java packages coupled to the package represented by this node are returned.•	Tests to check if the string representation of this node in it’s current tree context are returned.File: EfferentNodeTest.java Tests: EfferentNode.javaThe EfferentNode class is a PackageNode for an efferent Java package and its efferent packages.•	Tests to check if efferent node is constructed with the specified parent node and efferent java package•	Tests to check if package node is returned with the specified parent node and java package•	Tests to check if collection of java packages coupled to the package represented by this node are returned.•	Tests to check if specified package should be displayed as a child of this node.•	Tests to check if the string representation of this node in it’s current tree context are returned.File: DependTreeTest.java Tests: DependTree.javaThe DependTree class defines the graphical tree for displaying the packages and their hierarchical dependencies.Tests if depend tree’s properties are created as expected.Tests if depend tree’s model is set as expected.Tests to check if the properties of scroll pane are set as expected.Tests to check if tree is created as expectedTests to check the properties of the tree created.File: DependTreeModelTest.java Tests: DependTreeModel.javaThe DependTreeModel class defines the data model being observed by a DependTree instance.•	Tests if a depend tree model with the specified root package node is created.•	Tests to check if root of the tree is returned•	Tests to check if the child of the specified parent at the specified index in the parent’s child collection is returned•	Tests to check if the number of children for the specified parent are returned•	Tests to check if the specified tree node is a leaf node•	Tests to check if the index of the specified child with the specified parent is returnedFile: JDependTest.java Tests: JDepend.javaThe JDepend class analyzes directories of Java class files, generates metrics for each Java package, and reports the metrics in a Swing tree. Line 117 has been commented out to make sure the swing window doesn’t pop up during tests.•	Tests if directory can be added to the collection of directories to be analyzed.•	Tests to set the package filter.•	Tests to set comma separated list of components•	Tests to analyze the registered directories and generate metrics and reports metrics in a graphical format.•	Tests to check if tree is updated for all the list of packages•	Tests to check if swing window created has the expected dimensions and properties•	Tests to check if components of the window are created with the expected properties :o	Frame, o	TreePanel, o	StatusPanel, o	ProgressBar, o	StatusField, o	MenuBar, o	Menu, o	MenuItem•	Tests if the status message or status error is displayed with the message passed.•	Tests to check efferent/afferent tree of a swing are retrievedFile: StatusPanelTest.java Tests: StatusPanel.javaThe StatusPanel class defines the status-related UI components. This panel primarily contains either a text field or a progress bar.•	Tests if status panel is constructed with the expected properties.•	Tests if the specified component are set as the current status component of this panel.