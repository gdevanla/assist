How to run the tests:IDE : Eclipse API: JUnit 4Create a new project named DaisyDiff  in eclipse and import this project into the folder and run the tests in src/test as JUnit test.ACCEPTANCE TESTS:Package: org.outerj.daisy.diff.htmlFileName: FileBasedAcceptanceTest.javaRuns all tests in the DaisyDiff/testdata directory. Diffing is performed using the file a.html as the "old"version and the file b.html as the "new" version. The expected results of the diff must be provide in the file expected.htmlUNIT TESTSPackage: org.eclipse.compare.internalFile: LCSSettingsTest.javaTests: LCSSettings.javaLCSSettings is a helper function for the abstract LCS (Longest Common Subsequence) class which determines the changeset responsible for each line. •	Tests for setting and getting the value N*M (Myers’ algorithm) when to start binding at run time.•	Tests for setting and getting the limit complexity for long sequences.•	Tests to check if greedy method is set to detect differences between two files.Package: org.eclipse.compare.rangedifferencerRangeDifference objects are the elements of a compare result returned from the RangeDifferencer find diff methods. File: DifferencesIteratorTest.javaTests: DifferencesIterator.javaCustom iterator that iterates over a List of RangeDifferences which is used internally by the RangeDifferencer.•	Tests if the difference iterator is created given an array of non empty range differences and empty range differences•	Tests the size of a given empty and non-empty range differences•	Tests if an edit has been appended to its list•	Tests if the difference iterators are used in pairs.•	Tests if all range differences are removed File: OldDifferencerTest.javaTests: OldDifferencer.javaThis file is to test the algorithm used to diff two files. The class has private nested classes which have not been tested.•	Tests how differences are estimated by the algorithm given two html files. File: RangeComparatorLCSTest.javaTests: RangeComparatorLCS.javaTests the class which is the child class of abstract LCS class.•	Tests if the diffing operation is performed as expected with different inputs•	Tests to check the size of empty and non empty input files.•	Tests if LCS is initialized properly•	Tests if two ranges of the comparator are equalFile: RangeDifferencerTest.javaTests: RangeDifferencer.javaFinds the differences between two or three IRangeComparator’s.•	Tests if expected differences are found between the input files.•	Tests if the differences contain RangeDifference elements for non-differing ranges too.File: RangeDifferenceTest.javaTests: RangeDifference.javaDescribes a change between two or three ranges of comparable entities.•	Tests if the a range difference is created with the given change kind.•	Tests if the a range difference is created with the given change kind, left and right changes.•	Tests if the a range difference is created with the given change kind, left, right and ancestor changes.•	Tests if the correct kind of difference is returned.•	Tests if the correct start index of the entity range on the ancestor side is returned.•	Tests if the number of entities on the ancestor side is returned.•	Tests if the correct end index of the entity range on the ancestor side is returned.•	Tests if the correct start index of the entity range on the right side is returned.•	Tests if the number of entities on the right side is returned.•	Tests if the correct end index of the entity range on the right side is returned.•	Tests if the correct start index of the entity range on the left side is returned.•	Tests if the number of entities on the left side is returned.•	Tests if the correct end index of the entity range on the left side is returned.•	Tests if the maximum number of entities in the left, right and ancestor sides of this range are returned.•	Tests if the overridden equals method performs a deep comparison of the RangeDifferences.Package: org.outerj.dasiy.diffFile: DaisyDiffTest.javaTests: DaisyDiff.javaThe class which receives the diffing input from Main. •	Tests if the two HTML files are diffed and output is passed on to the specified consumer.•	Tests if the two HTML files are diffed word by word and output is passed on to the specified consumer.•	Tests if the two strings are diffed word by word and output is passed on to the specified consumer.File: HtmlCleanerTest.javaTests: HtmlCleaner.java•	Tests if the class cleans and parses the HTML input and outputs the result to the specified consumer.File: MainTest.javaTests: Main.java•	Tests if the final output file daisydiff.htm is created after diffing when the main function of the application is called with the required documents.File: XslFilterTest.javaTests: XslFilter.javaTests if the transformer factory is created and a template is created containing the xsl file.Tests if a transformer is created using the template.Package: org.outerj.dasiy.diff.helperFile: MergeCharacterEventsHandlerTest.javaTests: MergeCharacterEventsHandler.java•	Tests if the characters are copied to a new array of characters if the array is empty.•	Tests if the characters are appended to the existing array if the array is not empty.•	Tests if the characters are moved to the specified consumer and the characters are null after they are flushed.•	Tests if the characters are flushed before sending notification of the end of a document.•	Tests if the characters are flushed before sending notification of the beginning of a document.•	Tests if the characters are flushed before sending notification of the end of an element.•	Tests if the characters are flushed before sending notification of the beginning of an element.•	Tests if the characters are flushed before ending the scope of a prefix-URI mapping.•	Tests if the characters are flushed before beginning the scope of a prefix-URI mapping.•	Tests if the characters are flushed before sending notification of an ignorable white space.•	Tests if the characters are flushed before sending notification of skipped entity.•	Tests if the characters are flushed before sending notification of a processing instruction.•	Tests if the characters are flushed before sending an object for locating the origin of SAX document events.File: NekoHtmlParserTest.javaTests: NekoHtmlParser.java•	Tests if Html File is parsed using the Neko HTML parser. •	Tests if all the elements and attributes are converted to lowercase.•	Tests if all the namespaces are removed.•	Tests if well-formed XML is produced.Package: org.outerj.dasiy.diff.htmlFile: HTMLDifferTest.java & HtmlTestFixture.javaTests: HTMLDiffer.javaHtmlTestFixture is a helper function which receives input as strings from HTML Differ test, cleans up the strings first and converts them to text node comparators before diffing..•	Tests diffing results when a single word is added•	Tests diffing results when a single word is added and also an ancestor file is passed•	Tests difffing results when a single word is removed•	Tests diffing results when a single word is removed and also an ancestor file is passed•	Tests difffing results when a single word is changed•	Tests diffing results when a single word is changed and also an ancestor file is passed•	Tests diffing results when an attribute is added•	Tests diffing results when an attribute is added and also an ancestor file is passed•	Tests diffing results when a tag is added•	Tests diffing results when a tag is added and also an ancestor file is passed•	Tests diffing results when there are two text changes•	Tests diffing results when there are two text changes and also an ancestor file is passedFile: LongHtmlTest.javaTests: HTMLDiffer.java•	Tests diffing results by passing long lines of html.File: HtmlSaxDiffOutputTest.javaTests: HtmlSaxDiffOutput.java•	Tests if the output generated has the expected format when a new word is added.•	Tests if the output generated has the expected format when a word is removed.•	Tests if the output generated has the expected format when there is a conflict between both the files.•	Tests if the output generated has the expected format when a word is changed.•	Tests if the output generated has the expected format when there is no change.•	Tests if the output generated has the expected format when a new attribute is added.•	Tests if the output generated has the expected format when an attribute is removed.•	Tests if the output generated has the expected format when an attribute is changed.•	Tests if the output generated has the expected format when a new image is added.•	Tests if the output generated has the expected format when an image is removed.•	Tests if the output generated has the expected format when there is a conflict between current and previous image.File: TextNodeComparatorTest.javaTests: TextNodeComparator.javaComparator generates Dom tree from handling SAX events. Then this is used to compute the differences between DOM trees and mark elements accordingly.•	Tests if the comparator’s get function retrieves the body and text nodes of Dom tree.•	Tests if the range count retrieves size of text nodes.•	Tests how a given range is marked as new by passing different inputs.•	Tests if two ranges are equal.•	Tests how a possible changed part is handled.•	Tests how a range is marked as deleted by passing different inputs.•	Tests to check text nodes iterator.•	Tests to check the get and set functions of newID, deletedID and changedID.•	Tests the get and set function of a private member variablePackage: org.outerj.dasiy.diff.ancestorFile: AncestorComparatorTest.javaTests: AncestorComparator.javaTests the comparator used when calculating the difference in ancestory of two nodes.•	Tests if size of ancestors is same as expected value.•	Tests if two ranges are equal in two different comparators.•	Tests if range comparison is skipped when set.•	Tests to set and get the test compared.•	Tests to check the results of comparison between two ancestors.File: AncestorComparatorResultTest.javaTests: AncestorComparatorResult.javaTests the comparator used when calculating the difference in ancestory of two nodes.•	Tests the result of an ancestor comparator.File: ChangeTextTest.javaTests: ChangeText.java•	Test if characters are added carefully to ‘change text’ if incoming characters is more than the number of chars in a line.•	Tests if characters are added to a new line when set.•	Tests to make sure html content is added smoothly to ‘change text’.File: ChangeTextGeneratorTest.javaTests: ChangeTextGenerator.javaTests if the change text is generated based on whether the left or right part of the range difference is old.File:TextOnlyComparatorTest.javaTests: TextOnlyComparator.javaComparator that compares only elements of text inside a given tag.•	Tests to recursively traverse the tree and add textnodes to an existing list of textnodes.•	Tests to get the size of a tree.•	Tests to check two comparators ranges are equal.•	Tests the match ratio of two comparators of a tree.Package: org.outerj.dasiy.diff.ancestor.tagtostringFile:TagToStringTest.java & TagToStringFactoryTest.javaTests: TagToString.java & TagToStringFactory.javaTagToStringFactoryTest  is a helper function for TagToString class.•	Tests if appropriate text is added to the “change text” based on the added description.•	Tests if description has been added based on node/attribute.•	Tests if appropriate text is added to “change text” based on the removed tag.•	Tests if the TagChangeSemantic returned is MOVED when the tag is one of the predefined container tags.•	Tests if the TagChangeSemantic returned is STYLE when the tag is one of the predefined style tags.•	Tests if AnchorToString is called when anchor tag is passed.•	Tests if NoContentTagToString is invoked when image tag is passed.File:AnchorToStringTest.java Tests: AnchorToString.javaThis class is for the anchor <a> tags in html.Tests if anchor is created given a tag node.Tests if attributes added to an anchor tag is appended to the “change text”.Tests if bundle properly loads for the user’s localeFile: NoContentTagToStringTest.javaTests: NoContentTagToString.javaThis class is for image tag.•	Checks if “change text ” has been modified based on the added description.•	Checks if “change text” has been modified based on removed description.Package: org.outerj.dasiy.diff.html.domFile: BodyNodeTest.javaTests: BodyNode.java Represent the root body node of a html document.•	Tests if deep copy of a tree is performed with/without children.•	Tests if minimum deleted set of nodes is retrieved for a given node.File: DomTreeBuilderTest.javaTests: DomTreeBuilder.java •	Tests if the content handler is already processing a document. If yes it throws an exception, else it marks the current document as started.•	Tests if document has not been marked as started but document end has been invoked. If yes, it throws an exception.•	Tests if tree is built based on start element being invoked. •	Tests if tree is built based on end element being invoked. File: ImageNodeTest.javaTests: ImageNode.java Represents an image in HTML. •	Test that asserts true if the text of two image node is same.•	Test that checks if there is a source attribute for the image node.File: NodeTest.javaTests: Node.java Represents any element in the DOM tree of a HTML file.•	Tests if the created node is appended to the collection of the parent’s children.•	Tests if the parameter is set as the parent for the created node.•	getParentTree - Tests if list of ancestors are returned starting from the root by depth.Tests if empty list of nodes is returned if parent is null•	getRoot - Tests if node is returned when it does not have parent and it is a tagnodeTests if null is returned when it does not have parentTests if top ancestor a node is returned if it has a parent•	getLastCommonParentTests if the last common parent of 2 nodes is returned•	setParent & getParentTests if the parent field of a node is changed•	inPreChecks if true is returned when ancestors are in <pre> tagFile: SeparatingNodeTest.java.javaTests: SeparatingNode.java This is an artificial text node whose sole purpose is to separate text nodes, so that they cannot be treated as a continuous text by the RangeDifferencer.•	Tests if separating node is created given a parent node•	Tests the overridden equals method which returns true only when a same separating node is compared with itself.File: TagNodeTest.javaTests: TagNode.java •	Node that can contain other nodes. Represents an HTML tag.•	addChildTests if the parameter is added as the child of this node.•	setRootTests if root is set for a node.•	getIndexOfTests if the index of first semantically equivalent child is returnedTests if -1 when node not found.•	addChild Tests if node is added at the specified location•	IteratorTests if iterator over the children collection is retrieved•	getNbChildrenTests if number of elements in children collection is retrieved•	Tests if two tags are semantically equivalent.•	Tests if two tags are equals•	Tests to retrieve the opening and ending tag of a node•	Tests to check if a node is block level•	Tests to check if a node is inline•	Tests to check left most and right most child of a node.•	Tests to check if a tree is copied deeplyFile: TextNodeTest.javaTests: TextNode.java Represents a piece of text in the HTML file. This is a child class of Node class. Overriden methods from Node class are tested with an instance of TextNode.File: WhiteSpaceNodeTest.javaTests: WhiteSpaceNode.java •	Tests if white space node is created given a tag node•	Tests if isWhiteSpace returns true when the character is tab, new line, empty space or carriage return.Package: org.outerj.dasiy.diff.html.dom.helperFile: AttributesMapTest.javaTests: AttributesMap.java Map is used to store DOM tag attribute names and values.•	Tests if constructor converts all attribute names to lower case.•	Tests if the method returns true if the attributes parameter contains the same attributes with the same qualifications for style and class as this map•	Tests if true is returned if two maps have the same set of keys and values•	Tests if method returns true when 2 values for style attribute of HTML tag are equivalent.•	Tests if method returns true when 2 values for class attribute of HTML tag are equivalent.File: LastCommonParentResultTest.javaTests: LastCommonParentResultMap.java When detecting the last common parent of two nodes, all results are stored as LastCommonParentResult•	Tests for the setting and getting last common parent node, depth and index in last common parent result.Package: org.outerj.dasiy.diff.html.modificationFile: HtmlLayoutChangeTest.javaTests: HtmlLayoutChange.javaThis class holds the removal or addition of HTML tags around text. It contains the same information that is presented in the tooltips of default Daisy Diff HTML output. It is simply provided for applications that use the DaisyDiff library and need more information on the results.Tests the set and get functions for type of change(added or removed) and type of tag (opening and closing).File: ModificationTest.javaTests:Modification.javaTests the set and get functions for type and output typeTests the set and get function for previous modification type Tests the set and get function for next modification typeTests the set and get function for changesTests the set and get function for IDTests the set and get function for First of IDTests the set and get function for HtmlLayoutChangePackage: org.outerj.dasiy.diff.tagFile: ArgumentComparatorTest.java & TagComparatorTest.javaTests: ArgumentComparator.java & TagComparator.javaTakes a String and generates tokens/atoms that can be used by LCS. This comparator is used specifically for arguments inside HTML tags.•	Tests if atoms are generated from a string.•	Tests if size of atoms are retrieved from the string.•	Tests if substring extracts contents of a string from the given index.•	Tests if character at two indices are equalFile: DelimiterAtomTest.javaTests: DelimiterAtom.java•	A TextAtom with an identifier from a limited set of delimiter strings.•	Tests to check if a character is a valid delimiter.•	Tests to check if an atom is a valid atom•	Tests to check if 2 atoms are equalFile: TagAtomTest.java & TextAtomTest.javaTests: TagAtom.java & TextAtom.java (Both of them implement Atom interface)•	An tag atom that represents a closing or opening tag.•	An text atom that represents a piece of ordinary text. •	Tests to get the identifier and internal identifier of a tag•	Tests if full text is retrieved from a tag atom•	Tests if 2 tag atoms are equal.File: TagDifferTest.javaTests: TagDiffer.javaTakes 2 AtomSplitters and computes the difference between them.•	Tests by adding a single word, removing a single word and changing a single word.•	Tests by adding a HTML attribute to the tag•	Tests by adding a HTML tag to the text•	Tests by changing text of a tag twiceFile: TagSaxDiffOutputTest.javaTests: TagSaxDiffOutput.javaOutputs the diff result as HTML elements to a SAX ContentHandler