public class com.ser.statecarver.test.testartifacts.TestPojo extends java.lang.Object
{
    public java.lang.String public_string_s;
    public int public_int_x;
    private int private_int_x;
    static int static_int_x;

    public void <init>(int, int, int, java.lang.String)
    {
        com.ser.statecarver.test.testartifacts.TestPojo this, temp$0;
        int public_int_x, private_int_x, static_int_x, temp$1;
        java.lang.String public_string_s;

        this := @this: com.ser.statecarver.test.testartifacts.TestPojo;
        public_int_x := @parameter0: int;
        private_int_x := @parameter1: int;
        static_int_x := @parameter2: int;
        public_string_s := @parameter3: java.lang.String;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<com.ser.statecarver.test.testartifacts.TestPojo: int public_int_x> = public_int_x;
        this.<com.ser.statecarver.test.testartifacts.TestPojo: int private_int_x> = private_int_x;
        this.<com.ser.statecarver.test.testartifacts.TestPojo: java.lang.String public_string_s> = public_string_s;
        temp$0 = this;
        temp$1 = <com.ser.statecarver.test.testartifacts.TestPojo: int static_int_x>;
        static_int_x = temp$1;
        return;
    }

    public void newadd(int)
    {
        com.ser.statecarver.test.testartifacts.TestPojo this;
        int x;
        java.io.PrintStream temp$0;

        this := @this: com.ser.statecarver.test.testartifacts.TestPojo;
        x := @parameter0: int;
        temp$0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$0.<java.io.PrintStream: void println(java.lang.String)>("new add");
        return;
    }

    public int add(java.lang.Integer)
    {
        com.ser.statecarver.test.testartifacts.TestPojo this;
        java.lang.Integer x;
        int y, temp$0, temp$1, temp$2, temp$3, temp$4, temp$6, temp$7, temp$8, temp$9, temp$10, temp$11;
        java.io.PrintStream temp$5;

        this := @this: com.ser.statecarver.test.testartifacts.TestPojo;
        x := @parameter0: java.lang.Integer;
        y = 10;
        temp$0 = this.<com.ser.statecarver.test.testartifacts.TestPojo: int private_int_x>;
        temp$1 = virtualinvoke x.<java.lang.Integer: int intValue()>();
        temp$2 = temp$0 + temp$1;
        this.<com.ser.statecarver.test.testartifacts.TestPojo: int private_int_x> = temp$2;
        temp$3 = this.<com.ser.statecarver.test.testartifacts.TestPojo: int public_int_x>;
        temp$4 = temp$3 * 2;
        this.<com.ser.statecarver.test.testartifacts.TestPojo: int public_int_x> = temp$4;
        temp$5 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$5.<java.io.PrintStream: void println(java.lang.String)>("Reached this statement1.");
        temp$6 = 100;
        <com.ser.statecarver.test.testartifacts.TestPojo: int static_int_x> = temp$6;
        temp$7 = virtualinvoke x.<java.lang.Integer: int intValue()>();
        temp$8 = temp$7 + 10;
        <com.ser.statecarver.test.testartifacts.TestPojo: int static_int_x> = temp$8;
        temp$9 = 30;
        <com.ser.statecarver.test.testartifacts.TestPojo: int static_int_x> = temp$9;
        temp$10 = <com.ser.statecarver.test.testartifacts.TestPojo: int static_int_x>;
        temp$11 = temp$10 + 50;
        return temp$11;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        com.ser.statecarver.test.testartifacts.TestPojo pojo, temp$0;
        java.lang.Integer temp$1, temp$6;
        int temp$2, temp$3, temp$4, temp$5, temp$7;

        args := @parameter0: java.lang.String[];
        temp$0 = new com.ser.statecarver.test.testartifacts.TestPojo;
        specialinvoke temp$0.<com.ser.statecarver.test.testartifacts.TestPojo: void <init>(int,int,int,java.lang.String)>(1, 1, 1, "test");
        pojo = temp$0;
        virtualinvoke pojo.<com.ser.statecarver.test.testartifacts.TestPojo: void newadd(int)>(1);
        temp$1 = new java.lang.Integer;
        specialinvoke temp$1.<java.lang.Integer: void <init>(int)>(10);
        temp$2 = virtualinvoke pojo.<com.ser.statecarver.test.testartifacts.TestPojo: int add(java.lang.Integer)>(temp$1);
        temp$3 = pojo.<com.ser.statecarver.test.testartifacts.TestPojo: int public_int_x>;
        temp$4 = temp$3 * 5;
        pojo.<com.ser.statecarver.test.testartifacts.TestPojo: int public_int_x> = temp$4;
        temp$5 = 20;
        temp$6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(temp$5);
        temp$7 = virtualinvoke pojo.<com.ser.statecarver.test.testartifacts.TestPojo: int add(java.lang.Integer)>(temp$6);
        return;
    }
}
